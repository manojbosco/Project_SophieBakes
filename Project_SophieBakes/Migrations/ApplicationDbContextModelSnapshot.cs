// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_SophieBakes.Data;

#nullable disable

namespace Project_SophieBakes.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Descriptions")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Cakes"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Cupcakes"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Cookies"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("Project_SophieBakes.Models.DeliveryOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DeliveryBoyId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryBoyId");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryOrders");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Delicious chocolate cake ",
                            ImageUrl = "/images/chocolate-cake.jpg",
                            Price = 399.00m,
                            ProductName = "Chocolate Cake"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            Description = "Soft delicious vanilla cupcake",
                            ImageUrl = "/images/vanilla-cupcake.jpg",
                            Price = 39.00m,
                            ProductName = "Vanilla Cupcake"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "Rich and delicious red velvet cake",
                            ImageUrl = "/images/red-velvet-cake.jpg",
                            Price = 699.00m,
                            ProductName = "Red Velvet Cake"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 4,
                            Description = "Tangy lemon tart with a buttery crust",
                            ImageUrl = "/images/Lemon Tart.jpg",
                            Price = 199.00m,
                            ProductName = "Lemon Tart"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            Description = "Moist carrot cake with cream cheese frosting",
                            ImageUrl = "/images/carrot cake.jpg",
                            Price = 499.00m,
                            ProductName = "Carrot Cake"
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Description = "Classic chocolate chip cookies",
                            ImageUrl = "/images/chocolate chip cookies.jpg",
                            Price = 29.00m,
                            ProductName = "Chocolate Cookies"
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1,
                            Description = "Layers of sponge cake with fresh strawberries",
                            ImageUrl = "/images/strawberry shortcake.jpg",
                            Price = 399.00m,
                            ProductName = "Strawberry Shortcake"
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1,
                            Description = "Classic pineapple upside down cake with Nuts",
                            ImageUrl = "/images/pineapple upside down cake.jpg",
                            Price = 499.00m,
                            ProductName = "Pineapple Upside Down Cake"
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 4,
                            Description = "Rich and creamy cheesecake with crushed cookies and Strawberry ",
                            ImageUrl = "/images/cheesecake.jpg",
                            Price = 599.00m,
                            ProductName = "Cheesecake"
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4,
                            Description = "Light, soft and creamy, full of tropical taste and delicious.",
                            ImageUrl = "/images/mango mousse.jpg",
                            Price = 299.00m,
                            ProductName = "Mango Mousse"
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 4,
                            Description = "Decadent chocolate mousse",
                            ImageUrl = "/images/chocolate mousse.jpg",
                            Price = 299.00m,
                            ProductName = "Chocolate Mousse"
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4,
                            Description = "Moist banana bread with walnuts",
                            ImageUrl = "/images/banana bread.jpg",
                            Price = 199.00m,
                            ProductName = "Banana Bread"
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 4,
                            Description = "Cheesecake with Oreo crust",
                            ImageUrl = "/images/oreo cheesecake.jpg",
                            Price = 599.00m,
                            ProductName = "Oreo Cheesecake"
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4,
                            Description = "The delicate flavor of layers of mascarpone and Italian custard",
                            ImageUrl = "/images/tiramisu.jpg",
                            Price = 499.00m,
                            ProductName = "Tiramisu"
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 2,
                            Description = "Assorted cupcakes",
                            ImageUrl = "/images/cupcake assortment.jpg",
                            Price = 199.00m,
                            ProductName = "Cupcake Assortment"
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 3,
                            Description = "They're rich, chocolatey, buttery fudge with extra love.",
                            ImageUrl = "/images/brownies.jpg",
                            Price = 29.00m,
                            ProductName = "Brownies"
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 4,
                            Description = "Apple pie is served with whipped cream and cheddar cheese.",
                            ImageUrl = "/images/apple pie.jpg",
                            Price = 399.00m,
                            ProductName = "Apple Pie"
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 4,
                            Description = "Warm peach cobbler with vanilla ice cream",
                            ImageUrl = "/images/peach cobbler.jpg",
                            Price = 299.00m,
                            ProductName = "Peach Cobbler"
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 4,
                            Description = " Chocolate Eclair Cake is an old-fashioned sheet cake and Cream-filled. ",
                            ImageUrl = "/images/chocolate eclair.jpg",
                            Price = 49.00m,
                            ProductName = "Chocolate Eclair"
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 1,
                            Description = "Delicious pistachio-flavored cake is super moist and flavorful bomb",
                            ImageUrl = "/images/pistachio cake.jpg",
                            Price = 499.00m,
                            ProductName = "Pistachio Cake"
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 4,
                            Description = "Creamy coconut pie with a flaky crust and love",
                            ImageUrl = "/images/coconut cream pie.jpg",
                            Price = 399.00m,
                            ProductName = "Coconut Cream Pie"
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 4,
                            Description = "Fresh raspberry tart with a buttery crust and wild raspberry",
                            ImageUrl = "/images/raspberry tart.jpg",
                            Price = 299.00m,
                            ProductName = "Raspberry Tart"
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 3,
                            Description = "Crispy almond biscotti made in home with love and care",
                            ImageUrl = "/images/Almond Biscotti.jpg",
                            Price = 29.00m,
                            ProductName = "Almond Biscotti"
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 4,
                            Description = "Traditional fruit cake with mixed fruits and love",
                            ImageUrl = "/images/Fruit Cake.jpg",
                            Price = 599.00m,
                            ProductName = "Fruit Cake"
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 4,
                            Description = "Rich chocolate fondant with a gooey center",
                            ImageUrl = "/images/chocolate fondant.jpg",
                            Price = 399.00m,
                            ProductName = "Chocolate Fondant"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderItem", b =>
                {
                    b.HasOne("Project_SophieBakes.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_SophieBakes.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.CartItem", b =>
                {
                    b.HasOne("Project_SophieBakes.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_SophieBakes.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.DeliveryOrders", b =>
                {
                    b.HasOne("User", "DeliveryBoy")
                        .WithMany()
                        .HasForeignKey("DeliveryBoyId");

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryBoy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.Order", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.Product", b =>
                {
                    b.HasOne("Project_SophieBakes.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project_SophieBakes.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
